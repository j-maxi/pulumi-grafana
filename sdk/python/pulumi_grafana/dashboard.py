# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import json
import warnings
import pulumi
import pulumi.runtime
from typing import Union
from . import utilities, tables

class Dashboard(pulumi.CustomResource):
    config_json: pulumi.Output[str]
    """
    The JSON configuration for the dashboard.
    """
    folder: pulumi.Output[float]
    slug: pulumi.Output[str]
    """
    A URL "slug" for this dashboard, generated by Grafana by removing
    certain characters from the dashboard name given as part of the `config_json`
    argument. This can be used to generate the URL for a dashboard.
    """
    def __init__(__self__, resource_name, opts=None, config_json=None, folder=None, __props__=None, __name__=None, __opts__=None):
        """
        The dashboard resource allows a dashboard to be created on a Grafana server.
        
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] config_json: The JSON configuration for the dashboard.

        > This content is derived from https://github.com/terraform-providers/terraform-provider-grafana/blob/master/website/docs/r/dashboard.html.markdown.
        """
        if __name__ is not None:
            warnings.warn("explicit use of __name__ is deprecated", DeprecationWarning)
            resource_name = __name__
        if __opts__ is not None:
            warnings.warn("explicit use of __opts__ is deprecated, use 'opts' instead", DeprecationWarning)
            opts = __opts__
        if opts is None:
            opts = pulumi.ResourceOptions()
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.version is None:
            opts.version = utilities.get_version()
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = dict()

            if config_json is None:
                raise TypeError("Missing required property 'config_json'")
            __props__['config_json'] = config_json
            __props__['folder'] = folder
            __props__['slug'] = None
        super(Dashboard, __self__).__init__(
            'grafana:index/dashboard:Dashboard',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name, id, opts=None, config_json=None, folder=None, slug=None):
        """
        Get an existing Dashboard resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.
        
        :param str resource_name: The unique name of the resulting resource.
        :param str id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] config_json: The JSON configuration for the dashboard.
        :param pulumi.Input[str] slug: A URL "slug" for this dashboard, generated by Grafana by removing
               certain characters from the dashboard name given as part of the `config_json`
               argument. This can be used to generate the URL for a dashboard.

        > This content is derived from https://github.com/terraform-providers/terraform-provider-grafana/blob/master/website/docs/r/dashboard.html.markdown.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = dict()
        __props__["config_json"] = config_json
        __props__["folder"] = folder
        __props__["slug"] = slug
        return Dashboard(resource_name, opts=opts, __props__=__props__)
    def translate_output_property(self, prop):
        return tables._CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop

    def translate_input_property(self, prop):
        return tables._SNAKE_TO_CAMEL_CASE_TABLE.get(prop) or prop

