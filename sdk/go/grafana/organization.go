// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package grafana

import (
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// The organization resource allows Grafana organizations and their membership to
// be created and managed.
//
// > This content is derived from https://github.com/terraform-providers/terraform-provider-grafana/blob/master/website/docs/r/organization.html.markdown.
type Organization struct {
	s *pulumi.ResourceState
}

// NewOrganization registers a new resource with the given unique name, arguments, and options.
func NewOrganization(ctx *pulumi.Context,
	name string, args *OrganizationArgs, opts ...pulumi.ResourceOpt) (*Organization, error) {
	inputs := make(map[string]interface{})
	if args == nil {
		inputs["adminUser"] = nil
		inputs["admins"] = nil
		inputs["createUsers"] = nil
		inputs["editors"] = nil
		inputs["name"] = nil
		inputs["viewers"] = nil
	} else {
		inputs["adminUser"] = args.AdminUser
		inputs["admins"] = args.Admins
		inputs["createUsers"] = args.CreateUsers
		inputs["editors"] = args.Editors
		inputs["name"] = args.Name
		inputs["viewers"] = args.Viewers
	}
	inputs["orgId"] = nil
	s, err := ctx.RegisterResource("grafana:index/organization:Organization", name, true, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &Organization{s: s}, nil
}

// GetOrganization gets an existing Organization resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetOrganization(ctx *pulumi.Context,
	name string, id pulumi.ID, state *OrganizationState, opts ...pulumi.ResourceOpt) (*Organization, error) {
	inputs := make(map[string]interface{})
	if state != nil {
		inputs["adminUser"] = state.AdminUser
		inputs["admins"] = state.Admins
		inputs["createUsers"] = state.CreateUsers
		inputs["editors"] = state.Editors
		inputs["name"] = state.Name
		inputs["orgId"] = state.OrgId
		inputs["viewers"] = state.Viewers
	}
	s, err := ctx.ReadResource("grafana:index/organization:Organization", name, id, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &Organization{s: s}, nil
}

// URN is this resource's unique name assigned by Pulumi.
func (r *Organization) URN() *pulumi.URNOutput {
	return r.s.URN()
}

// ID is this resource's unique identifier assigned by its provider.
func (r *Organization) ID() *pulumi.IDOutput {
	return r.s.ID()
}

func (r *Organization) AdminUser() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["adminUser"])
}

// A list of email addresses corresponding to users who
// should be given `admin` access to the organization. Note: users specified
// here must already exist in Grafana unless 'create_users' is set to true.
func (r *Organization) Admins() *pulumi.ArrayOutput {
	return (*pulumi.ArrayOutput)(r.s.State["admins"])
}

// Whether or not to create Grafana users specified
// in the organization's membership if they don't already exist in Grafana. If
// unspecified, this parameter defaults to `true`, creating placeholder users
// with the `name`, `login`, and `email` set to the email of the user, and a
// random password. Setting this option to `false` will cause an error to be
// thrown for any users that do not already exist in Grafana.
func (r *Organization) CreateUsers() *pulumi.BoolOutput {
	return (*pulumi.BoolOutput)(r.s.State["createUsers"])
}

// A list of email addresses corresponding to users who
// should be given `editor` access to the organization. Note: users specified
// here must already exist in Grafana unless 'create_users' is set to true.
func (r *Organization) Editors() *pulumi.ArrayOutput {
	return (*pulumi.ArrayOutput)(r.s.State["editors"])
}

// The display name for the Grafana organization created.
func (r *Organization) Name() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["name"])
}

// The organization id assigned to this organization by Grafana.
func (r *Organization) OrgId() *pulumi.IntOutput {
	return (*pulumi.IntOutput)(r.s.State["orgId"])
}

// A list of email addresses corresponding to users who
// should be given `viewer` access to the organization. Note: users specified
// here must already exist in Grafana unless 'create_users' is set to true.
func (r *Organization) Viewers() *pulumi.ArrayOutput {
	return (*pulumi.ArrayOutput)(r.s.State["viewers"])
}

// Input properties used for looking up and filtering Organization resources.
type OrganizationState struct {
	AdminUser interface{}
	// A list of email addresses corresponding to users who
	// should be given `admin` access to the organization. Note: users specified
	// here must already exist in Grafana unless 'create_users' is set to true.
	Admins interface{}
	// Whether or not to create Grafana users specified
	// in the organization's membership if they don't already exist in Grafana. If
	// unspecified, this parameter defaults to `true`, creating placeholder users
	// with the `name`, `login`, and `email` set to the email of the user, and a
	// random password. Setting this option to `false` will cause an error to be
	// thrown for any users that do not already exist in Grafana.
	CreateUsers interface{}
	// A list of email addresses corresponding to users who
	// should be given `editor` access to the organization. Note: users specified
	// here must already exist in Grafana unless 'create_users' is set to true.
	Editors interface{}
	// The display name for the Grafana organization created.
	Name interface{}
	// The organization id assigned to this organization by Grafana.
	OrgId interface{}
	// A list of email addresses corresponding to users who
	// should be given `viewer` access to the organization. Note: users specified
	// here must already exist in Grafana unless 'create_users' is set to true.
	Viewers interface{}
}

// The set of arguments for constructing a Organization resource.
type OrganizationArgs struct {
	AdminUser interface{}
	// A list of email addresses corresponding to users who
	// should be given `admin` access to the organization. Note: users specified
	// here must already exist in Grafana unless 'create_users' is set to true.
	Admins interface{}
	// Whether or not to create Grafana users specified
	// in the organization's membership if they don't already exist in Grafana. If
	// unspecified, this parameter defaults to `true`, creating placeholder users
	// with the `name`, `login`, and `email` set to the email of the user, and a
	// random password. Setting this option to `false` will cause an error to be
	// thrown for any users that do not already exist in Grafana.
	CreateUsers interface{}
	// A list of email addresses corresponding to users who
	// should be given `editor` access to the organization. Note: users specified
	// here must already exist in Grafana unless 'create_users' is set to true.
	Editors interface{}
	// The display name for the Grafana organization created.
	Name interface{}
	// A list of email addresses corresponding to users who
	// should be given `viewer` access to the organization. Note: users specified
	// here must already exist in Grafana unless 'create_users' is set to true.
	Viewers interface{}
}
