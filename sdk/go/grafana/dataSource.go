// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package grafana

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// The data source resource allows a data source to be created on a Grafana server.
//
// > This content is derived from https://github.com/terraform-providers/terraform-provider-grafana/blob/master/website/docs/r/data_source.html.markdown.
type DataSource struct {
	s *pulumi.ResourceState
}

// NewDataSource registers a new resource with the given unique name, arguments, and options.
func NewDataSource(ctx *pulumi.Context,
	name string, args *DataSourceArgs, opts ...pulumi.ResourceOpt) (*DataSource, error) {
	if args == nil || args.Type == nil {
		return nil, errors.New("missing required argument 'Type'")
	}
	inputs := make(map[string]interface{})
	if args == nil {
		inputs["accessMode"] = nil
		inputs["basicAuthEnabled"] = nil
		inputs["basicAuthPassword"] = nil
		inputs["basicAuthUsername"] = nil
		inputs["databaseName"] = nil
		inputs["isDefault"] = nil
		inputs["jsonData"] = nil
		inputs["name"] = nil
		inputs["password"] = nil
		inputs["secureJsonDatas"] = nil
		inputs["type"] = nil
		inputs["url"] = nil
		inputs["username"] = nil
	} else {
		inputs["accessMode"] = args.AccessMode
		inputs["basicAuthEnabled"] = args.BasicAuthEnabled
		inputs["basicAuthPassword"] = args.BasicAuthPassword
		inputs["basicAuthUsername"] = args.BasicAuthUsername
		inputs["databaseName"] = args.DatabaseName
		inputs["isDefault"] = args.IsDefault
		inputs["jsonData"] = args.JsonData
		inputs["name"] = args.Name
		inputs["password"] = args.Password
		inputs["secureJsonDatas"] = args.SecureJsonDatas
		inputs["type"] = args.Type
		inputs["url"] = args.Url
		inputs["username"] = args.Username
	}
	s, err := ctx.RegisterResource("grafana:index/dataSource:DataSource", name, true, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &DataSource{s: s}, nil
}

// GetDataSource gets an existing DataSource resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDataSource(ctx *pulumi.Context,
	name string, id pulumi.ID, state *DataSourceState, opts ...pulumi.ResourceOpt) (*DataSource, error) {
	inputs := make(map[string]interface{})
	if state != nil {
		inputs["accessMode"] = state.AccessMode
		inputs["basicAuthEnabled"] = state.BasicAuthEnabled
		inputs["basicAuthPassword"] = state.BasicAuthPassword
		inputs["basicAuthUsername"] = state.BasicAuthUsername
		inputs["databaseName"] = state.DatabaseName
		inputs["isDefault"] = state.IsDefault
		inputs["jsonData"] = state.JsonData
		inputs["name"] = state.Name
		inputs["password"] = state.Password
		inputs["secureJsonDatas"] = state.SecureJsonDatas
		inputs["type"] = state.Type
		inputs["url"] = state.Url
		inputs["username"] = state.Username
	}
	s, err := ctx.ReadResource("grafana:index/dataSource:DataSource", name, id, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &DataSource{s: s}, nil
}

// URN is this resource's unique name assigned by Pulumi.
func (r *DataSource) URN() *pulumi.URNOutput {
	return r.s.URN()
}

// ID is this resource's unique identifier assigned by its provider.
func (r *DataSource) ID() *pulumi.IDOutput {
	return r.s.ID()
}

// The method by which the browser-based Grafana
// application will access the data source. The default is "proxy", which means
// that the application will make requests via a proxy endpoint on the Grafana
// server.
func (r *DataSource) AccessMode() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["accessMode"])
}

// - If true, HTTP basic authentication will
// be used to make requests.
func (r *DataSource) BasicAuthEnabled() *pulumi.BoolOutput {
	return (*pulumi.BoolOutput)(r.s.State["basicAuthEnabled"])
}

// The
// password to use for basic auth.
func (r *DataSource) BasicAuthPassword() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["basicAuthPassword"])
}

// The
// username to use for basic auth.
func (r *DataSource) BasicAuthUsername() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["basicAuthUsername"])
}

// The name of the
// database to use on the selected data source server.
func (r *DataSource) DatabaseName() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["databaseName"])
}

// If true, the data source will be the default
// source used by the Grafana server. Only one data source on a server can be
// the default.
func (r *DataSource) IsDefault() *pulumi.BoolOutput {
	return (*pulumi.BoolOutput)(r.s.State["isDefault"])
}

// The default region
// and authentication type to access the data source. `jsonData` is documented
// in more detail below.
func (r *DataSource) JsonData() *pulumi.MapOutput {
	return (*pulumi.MapOutput)(r.s.State["jsonData"])
}

// A unique name for the data source within the Grafana
// server.
func (r *DataSource) Name() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["name"])
}

// The password to use to
// authenticate to the data source.
func (r *DataSource) Password() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["password"])
}

// The access and
// secret keys required to access the data source. `secureJsonData` is
// documented in more detail below.
func (r *DataSource) SecureJsonDatas() *pulumi.ArrayOutput {
	return (*pulumi.ArrayOutput)(r.s.State["secureJsonDatas"])
}

// The data source type. Must be one of the data source
// keywords supported by the Grafana server.
func (r *DataSource) Type() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["type"])
}

// The URL for the data source. The type of URL required
// varies depending on the chosen data source type.
func (r *DataSource) Url() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["url"])
}

// The username to use to
// authenticate to the data source.
func (r *DataSource) Username() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["username"])
}

// Input properties used for looking up and filtering DataSource resources.
type DataSourceState struct {
	// The method by which the browser-based Grafana
	// application will access the data source. The default is "proxy", which means
	// that the application will make requests via a proxy endpoint on the Grafana
	// server.
	AccessMode interface{}
	// - If true, HTTP basic authentication will
	// be used to make requests.
	BasicAuthEnabled interface{}
	// The
	// password to use for basic auth.
	BasicAuthPassword interface{}
	// The
	// username to use for basic auth.
	BasicAuthUsername interface{}
	// The name of the
	// database to use on the selected data source server.
	DatabaseName interface{}
	// If true, the data source will be the default
	// source used by the Grafana server. Only one data source on a server can be
	// the default.
	IsDefault interface{}
	// The default region
	// and authentication type to access the data source. `jsonData` is documented
	// in more detail below.
	JsonData interface{}
	// A unique name for the data source within the Grafana
	// server.
	Name interface{}
	// The password to use to
	// authenticate to the data source.
	Password interface{}
	// The access and
	// secret keys required to access the data source. `secureJsonData` is
	// documented in more detail below.
	SecureJsonDatas interface{}
	// The data source type. Must be one of the data source
	// keywords supported by the Grafana server.
	Type interface{}
	// The URL for the data source. The type of URL required
	// varies depending on the chosen data source type.
	Url interface{}
	// The username to use to
	// authenticate to the data source.
	Username interface{}
}

// The set of arguments for constructing a DataSource resource.
type DataSourceArgs struct {
	// The method by which the browser-based Grafana
	// application will access the data source. The default is "proxy", which means
	// that the application will make requests via a proxy endpoint on the Grafana
	// server.
	AccessMode interface{}
	// - If true, HTTP basic authentication will
	// be used to make requests.
	BasicAuthEnabled interface{}
	// The
	// password to use for basic auth.
	BasicAuthPassword interface{}
	// The
	// username to use for basic auth.
	BasicAuthUsername interface{}
	// The name of the
	// database to use on the selected data source server.
	DatabaseName interface{}
	// If true, the data source will be the default
	// source used by the Grafana server. Only one data source on a server can be
	// the default.
	IsDefault interface{}
	// The default region
	// and authentication type to access the data source. `jsonData` is documented
	// in more detail below.
	JsonData interface{}
	// A unique name for the data source within the Grafana
	// server.
	Name interface{}
	// The password to use to
	// authenticate to the data source.
	Password interface{}
	// The access and
	// secret keys required to access the data source. `secureJsonData` is
	// documented in more detail below.
	SecureJsonDatas interface{}
	// The data source type. Must be one of the data source
	// keywords supported by the Grafana server.
	Type interface{}
	// The URL for the data source. The type of URL required
	// varies depending on the chosen data source type.
	Url interface{}
	// The username to use to
	// authenticate to the data source.
	Username interface{}
}
