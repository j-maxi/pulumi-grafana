// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package grafana

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// The dashboard resource allows a dashboard to be created on a Grafana server.
//
// > This content is derived from https://github.com/terraform-providers/terraform-provider-grafana/blob/master/website/docs/r/dashboard.html.markdown.
type Dashboard struct {
	s *pulumi.ResourceState
}

// NewDashboard registers a new resource with the given unique name, arguments, and options.
func NewDashboard(ctx *pulumi.Context,
	name string, args *DashboardArgs, opts ...pulumi.ResourceOpt) (*Dashboard, error) {
	if args == nil || args.ConfigJson == nil {
		return nil, errors.New("missing required argument 'ConfigJson'")
	}
	inputs := make(map[string]interface{})
	if args == nil {
		inputs["configJson"] = nil
		inputs["folder"] = nil
	} else {
		inputs["configJson"] = args.ConfigJson
		inputs["folder"] = args.Folder
	}
	inputs["slug"] = nil
	s, err := ctx.RegisterResource("grafana:index/dashboard:Dashboard", name, true, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &Dashboard{s: s}, nil
}

// GetDashboard gets an existing Dashboard resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDashboard(ctx *pulumi.Context,
	name string, id pulumi.ID, state *DashboardState, opts ...pulumi.ResourceOpt) (*Dashboard, error) {
	inputs := make(map[string]interface{})
	if state != nil {
		inputs["configJson"] = state.ConfigJson
		inputs["folder"] = state.Folder
		inputs["slug"] = state.Slug
	}
	s, err := ctx.ReadResource("grafana:index/dashboard:Dashboard", name, id, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &Dashboard{s: s}, nil
}

// URN is this resource's unique name assigned by Pulumi.
func (r *Dashboard) URN() *pulumi.URNOutput {
	return r.s.URN()
}

// ID is this resource's unique identifier assigned by its provider.
func (r *Dashboard) ID() *pulumi.IDOutput {
	return r.s.ID()
}

// The JSON configuration for the dashboard.
func (r *Dashboard) ConfigJson() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["configJson"])
}

func (r *Dashboard) Folder() *pulumi.IntOutput {
	return (*pulumi.IntOutput)(r.s.State["folder"])
}

// A URL "slug" for this dashboard, generated by Grafana by removing
// certain characters from the dashboard name given as part of the `configJson`
// argument. This can be used to generate the URL for a dashboard.
func (r *Dashboard) Slug() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["slug"])
}

// Input properties used for looking up and filtering Dashboard resources.
type DashboardState struct {
	// The JSON configuration for the dashboard.
	ConfigJson interface{}
	Folder interface{}
	// A URL "slug" for this dashboard, generated by Grafana by removing
	// certain characters from the dashboard name given as part of the `configJson`
	// argument. This can be used to generate the URL for a dashboard.
	Slug interface{}
}

// The set of arguments for constructing a Dashboard resource.
type DashboardArgs struct {
	// The JSON configuration for the dashboard.
	ConfigJson interface{}
	Folder interface{}
}
